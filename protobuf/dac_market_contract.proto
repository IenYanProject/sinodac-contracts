syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Sinodac.Contracts.DACMarket";

service DACMarketContract {

    option (aelf.csharp_state) = "DACMarketContractState";

    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) { }

    rpc CreateSeries (CreateSeriesInput) returns (google.protobuf.Empty) { }
    rpc AddCollection (AddCollectionInput) returns (google.protobuf.Empty) { }

    rpc ConfirmCopyright (ConfirmCopyrightInput) returns (google.protobuf.Empty) { }
    rpc List (ListInput) returns (google.protobuf.Empty) { }
    rpc Delist (DelistInput) returns (google.protobuf.Empty) { }
    
    rpc Buy (BuyInput) returns (google.protobuf.Empty) { }
}

message InitializeInput {
    string delegator_contract_address = 1;
    string credit_contract_address = 2;
    string dac_contract_address = 3;
    aelf.Address admin_address = 4;
    int32 service_fee_rate = 5;
    aelf.Address service_fee_receiver = 6;
    int64 service_fee = 7;
}

message AddCollectionInput {
    string series_name = 1;
    string dac_name = 2;
}

message ConfirmCopyrightInput {
    string dac_name = 1;
    bool is_confirm = 2;
    
}

message CreateSeriesInput {
    string series_name = 1;
    string series_description = 2;
    string cover_file_id = 3;
    string creator_organization = 4;
    aelf.Address creator = 5;
}

message ListInput {
    string dac_name = 1;
    google.protobuf.Timestamp public_time = 2;
}

message DelistInput {
}

message BuyInput {
}

message DACCopyright {
    string dac_name = 1;
    string copyright_id = 2;
}

message DACSeries {
    string series_name = 1;
    string series_description = 2;
    string cover_file_id = 3;
    string creator_organization = 4;
    aelf.Address creator = 5;
    CollectionList collection_list = 6;
    int64 collection_count = 7;
    google.protobuf.Timestamp create_time = 8;
}

message CollectionList {
    repeated string value = 1;
}