syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "Sinodac.Contracts.Delegator";

service DelegatorContract {
    option (aelf.csharp_state) = "DelegatorContractState";
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) { }
    rpc RegisterSenders (RegisterSendersInput) returns (google.protobuf.Empty) { }
    rpc Forward (ForwardInput) returns (google.protobuf.Empty) { }
    rpc ForwardCheck (aelf.Hash) returns (google.protobuf.Empty) { }

    rpc EnablePermissionCheck (EnablePermissionCheckInput) returns (google.protobuf.Empty) { }
    rpc GetNftInfoList (google.protobuf.Empty) returns (NftInfoList) {
     option (aelf.is_view) = true;
     }
    
    // DAC Specific
    
    rpc MintDAC (MintDACInput) returns (google.protobuf.Empty) { }
    rpc Buy (BuyInput) returns (google.protobuf.Empty) { }

    rpc IsPermittedAddress (IsPermittedAddressInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc IsPermittedMethod (IsPermittedMethodInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc GetForwardRecord (aelf.Hash) returns (ForwardRecord) {
        option (aelf.is_view) = true;
    }
    rpc CalculateUserAddress (google.protobuf.StringValue) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    aelf.Address admin_address = 1;
    aelf.Address dac_contract_address = 2;
}

message RegisterSendersInput {
    string scope_id = 1;
    AddressList address_list = 2;
    bool is_remove = 3;
}

message MintDACInput {
    string from_id = 1;
    string dac_name = 2;
    int64 from_dac_id = 3;
    aelf.Hash dac_file = 4;
    int64 quantity=5;
}

message BuyInput {
    string from_id = 1;
    string nftInfoid = 2;
    string file = 3;
    string nftHash = 4;
    string nftName = 5;
    int64 nftId = 6;
}

message NftInfo {
    string nft_name = 1;
    int64 nft_id = 2;
    aelf.Hash nft_hash = 3;
    aelf.Hash nft_file = 4;
}

message IsPermittedAddressInput {
    aelf.Address to_address = 1;
    string scope_id = 2;
    aelf.Address address = 3;
}

message IsPermittedMethodInput {
    aelf.Address to_address = 1;
    string scope_id = 2;
    string method_name = 3;
}

message ForwardInput {
    string from_id = 1;
    aelf.Address to_address = 2;
    string method_name = 3;
    bytes parameter = 4;
    string scope_id = 5;
}

message AddressList {
    repeated aelf.Address value = 1;
}

message NftInfoList {
    repeated NftInfo nftInfo = 1;
}

message StringList {
    repeated string value = 1;
}

message ForwardRecord {
    string from_id = 1;
    string scope_id = 2;
    aelf.Address virtual_from_address = 3;
    aelf.Address to_address = 4;
    string method_name = 5;
    bytes parameter = 6;
}

message EnablePermissionCheckInput {
    bool enable = 1;
}
